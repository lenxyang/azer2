 /**
 * Generated by afx
 * dont edit by hande
 */
#pragma once

#include "azer/render/render.h"
#include "azer/render/effect_creator.h"
#include "azer/math/math.h"

class DiffuseEffect: public azer::Effect {
 public:
  static const char kEffectName[];
  DiffuseEffect();
  ~DiffuseEffect();

  const char* name() const override;
  bool Init(const ShaderPrograms& source) override;
 /**
   * uniform buffer
   */
  #pragma pack(push, 4)

  struct vs_cbuffer {
    azer::Matrix4 pvw;
  };
  #pragma pack(pop)

  void SetPVW(const azer::Matrix4& value) {
    azer::GpuConstantsTable* tb = gpu_table_[(int)azer::kVertexStage].get();
    DCHECK(tb != NULL);
    tb->SetValue(0, &value, sizeof(azer::Matrix4));
  }


  /**
  * struct of Vertex 
  * input of Vertex Shader
  */
  struct Vertex {
    azer::Vector4 position;
    azer::Vector4 diffuse;
    Vertex(){}
    Vertex(const azer::Vector4 p0, const azer::Vector4 p1)
      : position(p0)
      , diffuse(p1)
      {}
  };

  static Effect* CreateObject() {
    return new DiffuseEffect;
  }
  static const int kVertexDescNum;
  static const azer::VertexDesc::Desc kVertexDesc[];
 protected:
  void InitTechnique(const ShaderPrograms& source);
  void InitGpuConstantTable();
  virtual void UseTexture(azer::Renderer* renderer) override;

  DECLARE_EFFECT_DYNCREATE(DiffuseEffect);
  DISALLOW_COPY_AND_ASSIGN(DiffuseEffect);
};

