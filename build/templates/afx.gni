#
# afx("basic_light") {
#   source = "a.afx"
#   # 实际上 afx 文件内部也提供文件名，此处之所以要制定，是为了能够统治
#   # gn 知道输出文件是什么，否则静态库的文件我们无法知晓
#   # 目前来看 afx 文件内的文件名是冗余的
#   # afx 模板目前仅仅用于开发实例，在实际过程中所有的 afx 都是已经开发好的
#   # 外部直接引用即可
#   filename = "$filename"
# }
#
#

template("afx") {
  afxc_path = "afxc.exe"
  afx_sources = invoker.sources
  
  action("$target_name" + "_afx_cppcode") {
    # afx_sources_str = ""
    # foreach(i, afx_sources) {
    #  afx_sources_str += "$i,"
    # }
    # print(afx_sources_str)
    afx_file_dir = rebase_path(".", root_build_dir)
    afxlib_path = rebase_path("//azer/azer/afx", root_build_dir)
    azer_root_path = rebase_path("//", root_build_dir)
    afxc_args = [
      "$afxc_path",
      "--output_dir=" + rebase_path(target_gen_dir, root_build_dir),
      "--afx=$afx_sources",
      "--afx_dir=${afx_file_dir}",
      "--hlslang",
      "--includes=$afxlib_path,$azer_root_path",
    ]

    afxc_listfile_args = afxc_args + ["--list_cpp", "--list_hpp"]
    afxc_output_filelist = exec_script("//build/gn_run_binary.py",
                                       afxc_listfile_args, "list lines")
    outputs = []
    foreach(i, afxc_output_filelist) {
      outputs += ["$target_gen_dir/$i"]
    }
    args = afxc_args
    script = "//build/gn_run_binary.py"
  }  

  config("$target_name"+ "_config") {
    include_dirs = [target_gen_dir]
  }
  source_set(target_name) {
    # exec_script("//azer/build/tools/shell/mkdir.py", afx_args)
    sources = []
    codegen_target_name = "$target_name" + "_afx_cppcode"
    afxc_gen_srcs = get_target_outputs(":$codegen_target_name")
    foreach(i, afxc_gen_srcs) {
      sources += [rebase_path("$i", ".")]
    }
    print(sources)
    direct_dependent_configs = [":$target_name" + "_config"]
    deps = [
      "//azer",
      "//azer/math",
      "//base",
      ":$codegen_target_name",
    ]
  }
}