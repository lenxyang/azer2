

static_library("afxlib") {
  sources = [
    "util/file_loader.cc",
    "util/file_loader.h",
  ]
  deps = [
    "//base:base",
    "compiler",
    "codegen",
    "linker",
    "preprocessor",
  ]
}

executable("afxc") {
  sources = [
    "afxc/afxc_main.cc",
    "afxc/afx_wrapper.cc",
    "afxc/afx_wrapper.h",
    "afxc/flags.cc",
    "afxc/flags.h",
  ]
  deps = [
    ":afxlib",
    "//base:base",
    "//azer/base:appinit",
  ]
}

test("afx_unittest") {
  sources = [
    "codegen/afx_codegen_unittest.cc",
    "codegen/builtin_codegen_unittest.cc",
    "codegen/cpp_codegen_unittest.cc",
    "codegen/hlsl_codegen_unittest.cc",
    "codegen/util_unittest.cc",
    "compiler/astree_unittest.cc",
    "compiler/expression_unittest.cc",
    "compiler/parser_unittest.cc",
    "compiler/syntax_error_unittest.cc",
    "compiler/value_unittest.cc",
    "linker/dependency_tree_unittest.cc",
    "linker/linker_unittest.cc",
    "linker/technique_parser_unittest.cc",
    "preprocessor/parser_unittest.cc",
    "preprocessor/recursive_unittest.cc",
    "preprocessor/tokenizer_unittest.cc",
  ]
  deps = [
    ":afxlib",
    "//base:base",
    "//base/test:run_all_unittests",
    "//testing/gtest",
    "preprocessor:preprocessor_parser",
  ]

  gen_dir = rebase_path(target_gen_dir, root_build_dir, ".")
  include_dirs = ["$gen_dir"]
}
