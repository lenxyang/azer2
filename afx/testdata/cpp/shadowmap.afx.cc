 /**
 * Generated by afx
 * dont edit by hande
 */
#include <stddef.h>


#include "base/logging.h"

#include "azer/render/render.h"

const azer::VertexDesc::Desc DiffuseEffect::kVertexDesc[] = {
  {"POSITION", 0, azer::kVec3},
};

const int DiffuseEffect::kVertexDescNum = arraysize(DiffuseEffect::kVertexDesc);

DiffuseEffect::DiffuseEffect(const std::vector<std::string>& sources, azer::RenderSystem* rs) 
  : azer::Effect(rs) 
  , sources_(sources) {
  DCHECK(sources.size() == azer::kRenderPipelineStageNum);
  DCHECK(!sources[azer::kVertexStage].empty());
  DCHECK(!sources[azer::kPixelStage].empty());
  Init();
}

DiffuseEffect::~DiffuseEffect() {
}

void DiffuseEffect::Init() {
  InitTechnique();
  // generate GpuTable init for stage azer::kVertexStage
  azer::ShaderParamTable::Desc vs_table_desc[] = {
    azer::ShaderParamTable::Desc("pvw", azer::ShaderParamType::kMatrix4,
         offsetof(vs_cbuffer, pvw), 1),
    azer::ShaderParamTable::Desc("shadowmap_pvw", azer::ShaderParamType::kMatrix4,
         offsetof(vs_cbuffer, shadowmap_pvw), 1),
  };
  gpu_table_[azer::kVertexStage].reset(render_system_->CreateShaderParamTable(
      arraysize(vs_table_desc), vs_table_desc));
}

void DiffuseEffect::InitTechnique() {
  technique_.reset(render_system_->CreateTechnique());
  vertex_desc_ptr_.reset(new azer::VertexDesc(kVertexDesc, kVertexDescNum));
  const std::string& vs_shader_source = sources_[azer::kVertexStage];
  DCHECK(!vs_shader_source.empty());
  azer::GpuProgramPtr vs_gpup_ptr(render_system_->CreateVertexGpuProgram(
      vertex_desc_ptr_, vs_shader_source));
  DCHECK(vs_gpup_ptr.get() != NULL);
  technique_->AddGpuProgram(vs_gpup_ptr);
  {
    const std::string& source = sources_[azer::kPixelStage];
    DCHECK(!source.empty());
    azer::GpuProgramPtr gpup_ptr(render_system_->CreateGpuProgram(
        azer::kPixelStage, source));
    DCHECK(gpup_ptr.get() != NULL);
    technique_->AddGpuProgram(gpup_ptr);
  }
  technique_->Use(render_system_->GetDefaultRenderer());
}

void DiffuseEffect::UseTexture(azer::Renderer* renderer) {
  renderer->UseTexture(azer::kPixelStage, 0, ps_shadowmap_tex_.get());
}
