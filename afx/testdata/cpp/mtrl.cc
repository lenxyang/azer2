 /**
 * Generated by afx
 * dont edit by hande
 */
#include <stddef.h>

#include "base/basictypes.h"
#include "base/logging.h"

#include "azer/render/render.h"

const azer::VertexDesc::Desc effect::kVertexDesc[] = {
  {"POSITION", 0, azer::kVec3},
  {"NORMAL", 0, azer::kVec3},
  {"TEXCOORD", 0, azer::kVec3},
};

const int effect::kVertexDescNum = arraysize(effect::kVertexDesc);

effect::effect(const std::vector<std::string>& sources, azer::RenderSystem* rs) 
  : azer::Effect(rs) 
  , sources_(sources) {
  DCHECK(sources.size() == azer::kRenderPipelineStageNum);
  DCHECK(!sources[azer::kVertexStage].empty());
  DCHECK(!sources[azer::kPixelStage].empty());
  Init();
}

effect::~effect() {
}

void effect::Init() {
  InitTechnique();
  // generate GpuTable init for stage azer::kPixelStage
  azer::GpuConstantsTable::Desc ps_table_desc[] = {
    azer::GpuConstantsTable::Desc("light1", azer::GpuConstantsType::kSpotLight,
         offsetof(ps_cbuffer,light1), 1),
    azer::GpuConstantsTable::Desc("mtrl", azer::GpuConstantsType::kMaterial,
         offsetof(ps_cbuffer,mtrl), 1),
  };
  gpu_table_[azer::kPixelStage].reset(render_system_->CreateGpuConstantsTable(
      arraysize(ps_table_desc), ps_table_desc));
}

void effect::InitTechnique() {
  technique_.reset(render_system_->CreateTechnique());
  vertex_desc_ptr_.reset(new azer::VertexDesc(kVertexDesc, kVertexDescNum));
  const std::string& vs_shader_source = sources_[azer::kVertexStage];
  DCHECK(!vs_shader_source.empty());
  azer::GpuProgramPtr vs_gpup_ptr(render_system_->CreateVertexGpuProgram(
      vertex_desc_ptr_, vs_shader_source));
  DCHECK(vs_gpup_ptr.get() != NULL);
  technique_->AddGpuProgram(vs_gpup_ptr);
  {
    const std::string& source = sources_[azer::kPixelStage];
    DCHECK(!source.empty());
    azer::GpuProgramPtr gpup_ptr(render_system_->CreateGpuProgram(
        azer::kPixelStage, source));
    DCHECK(gpup_ptr.get() != NULL);
    technique_->AddGpuProgram(gpup_ptr);
  }
  technique_->Use(render_system_->GetDefaultRenderer());
}

void effect::UseTexture(azer::Renderer* renderer) {
  for (size_t i = 0; i < arraysize(ps_mtrl__difftex_); ++i) {
    if (ps_mtrl__difftex_[i].get() == NULL) { break; }
    renderer->UseTextureazer::kPixelStage, 0, ps_mtrl__difftex_[i].get());
  }
}
void effect::SetMaterial(azer::MaterialPtr material) {}
